// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Recommends financing options and optimal purchase timing based on the total cost.
 *
 * - financingRecommendation - A function that handles the financing recommendation process.
 * - FinancingRecommendationInput - The input type for the financingRecommendation function.
 * - FinancingRecommendationOutput - The return type for the financingRecommendation function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const FinancingRecommendationInputSchema = z.object({
  totalCost: z
    .number()
    .describe('The total cost of the selected laptops and peripherals.'),
});
export type FinancingRecommendationInput = z.infer<
  typeof FinancingRecommendationInputSchema
>;

const FinancingRecommendationOutputSchema = z.object({
  recommendation: z
    .string()
    .describe(
      'A recommendation for financing options and optimal purchase timing.'
    ),
});
export type FinancingRecommendationOutput = z.infer<
  typeof FinancingRecommendationOutputSchema
>;

export async function financingRecommendation(
  input: FinancingRecommendationInput
): Promise<FinancingRecommendationOutput> {
  return financingRecommendationFlow(input);
}

const prompt = ai.definePrompt({
  name: 'financingRecommendationPrompt',
  input: {schema: FinancingRecommendationInputSchema},
  output: {schema: FinancingRecommendationOutputSchema},
  prompt: `Based on the total cost of the selected items, which is {{totalCost}}, provide a recommendation for financing options and optimal purchase timing. Consider various factors such as interest rates, EMI options, and potential discounts or sales events. Provide specific suggestions for how the user can make an informed decision about affordability.`,
});

const financingRecommendationFlow = ai.defineFlow(
  {
    name: 'financingRecommendationFlow',
    inputSchema: FinancingRecommendationInputSchema,
    outputSchema: FinancingRecommendationOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
